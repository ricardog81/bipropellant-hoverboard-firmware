; PlatformIO Project Configuration File2
; http:;docs.platformio.org/page/projectconf.html

[platformio]
include_dir = inc

;default_envs = genericSTM32F103RC
;default_envs = hoverboard
;default_envs = hoverboard_6word
;default_envs = control_softwareserial
;default_envs = control_usart2
;default_envs = control_usart3
default_envs = control_usart3_ADC
;default_envs = control_ADC
;default_envs = control_PPM


[env:genericSTM32F103RC]
; Default environment, uses settings as specified in config.h
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
#    -Wl,-lnosys


[env:hoverboard]
; this control type allows the board to be used AS a hoverboard,
; responding to sensor movements when in hoverboard mode.
;/ and uses softwareserial for serial control on B2/C9
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Ofast
#    -Wl,-lnosys
    -D CONTROL_TYPE=6           ; Use control Type 'HOVERBOARD'

[env:hoverboard_6word]
; this control type allows the board to be used AS a hoverboard,
; responding to sensor movements when in hoverboard mode.
;/ and uses softwareserial for serial control on B2/C9
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=5        ; Use HOVERBOARD_WITH_SOFTWARE_SERIAL_B2_C9_6WORDSENSOR from config.h as base for this config


[env:control_softwareserial]
; hoverboard sensor functionality is disabled
; and uses softwareserial for serial control on A2/A3 -
; which are actually USART pins!
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=4        ; Use SOFTWARE_SERIAL_A2_A3 from config.h as base for this config


[env:control_usart2]
; hoverboard sensor functionality is disabled
; and control is via USART2
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=2        ; Use USART2_CONTROLLED from config.h as base for this config

[env:control_usart3]
; hoverboard sensor functionality is disabled
; and control is via USART3
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=3        ; Use USART3_CONTROLLED from config.h as base for this config

[env:control_usart3_ADC]
; hoverboard sensor functionality is disabled
; and control is via USART2 and ADC
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=3        ; Use USART3_CONTROLLED from config.h as base for this config

; ###### CONTROL VIA TWO POTENTIOMETERS ######
    -D CONTROL_ADC           ; use ADC as input. disable DEBUG_SERIAL_USART2!
    -D ADC1_MIN=0            ; min ADC1-value while poti at minimum-position (0 - 4095)
    -D ADC1_ZERO=1700        ; ADC1-value while poti at zero-position (0 - 4095)
    -D ADC1_MAX=4095         ; max ADC1-value while poti at maximum-position (0 - 4095)
    -D ADC1_MULT_NEG=1300.0f ; Use 1000.0f to calibrate from MIN to MAX
    -D ADC1_MULT_POS=3000.0f ; Use 1000.0f to calibrate from MIN to MAX

    -D ADC2_MIN=0            ; min ADC2-value while poti at minimum-position (0 - 4095)
    -D ADC2_ZERO=2000        ; ADC2-value while poti at zero-position (0 - 4095)
    -D ADC2_MAX=4095         ; max ADC2-value while poti at maximum-position (0 - 4095)
    -D ADC2_MULT_NEG=330.0f  ; Use 1000.0f to calibrate from MIN to MAX
    -D ADC2_MULT_POS=330.0f  ; Use 1000.0f to calibrate from MIN to MAX

    -D ADC_OFF_START=0       ; Start Value of Area at which other inputs can be active (0 - 4095) Applies to Speed ADC
    -D ADC_OFF_END=1200      ; End Value of Area at which other inputs can be active (0 - 4095) Applies to Speed ADC
    -D ADC_OFF_FILTER=0.1
    -D ADC_SWITCH_CHANNELS=1 ; define if ADC1 is used for Steer and ADC2 for Speed
    -D ADC_REVERSE_STEER=0   ; define if ADC1 is used for Steer and ADC2 for Speed

    -D INVERT_R_DIRECTION=1
    -D INVERT_L_DIRECTION=1

[env:control_ADC]
; hoverboard sensor functionality is disabled
; and control is via ADC
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=0           ; Do not use predefined control type
-D DEBUG_SERIAL_USART3
-D DEBUG_SERIAL_ASCII
-D DEBUG_BAUD=9600
; ###### CONTROL VIA TWO POTENTIOMETERS ######
    -D CONTROL_ADC           ; use ADC as input. disable DEBUG_SERIAL_USART2!

[env:control_PPM]
; hoverboard sensor functionality is disabled
; and control is via ADC
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T${PROJECT_DIR}/STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D CONTROL_TYPE=0           ; Do not use predefined control type
    -D CONTROL_PPM
    -D PPM_NUM_CHANNELS=6